{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import cloneDeep from'lodash/cloneDeep';// The card class with information about the card\nimport{jsx as _jsx}from\"react/jsx-runtime\";export class Card{constructor(){this.cardName=\"\";this.cardSprite=null;this.AccuracyPoints=0;this.DefencePoints=0;this.DamagePoints=0;this.HealthPoints=0;this.rarity=null;this.Trigger=\"\";this.Effect=\"\";}}// Initial values for context\nconst initialGlobalCardStats={healthRange:[2,5],damageRange:[1,4],defenceRange:[2,4],accuracyRange:[1,5],distributionPoints:12};const initialUsePointDistributionSystem=true;// Create context\nconst GlobalCardStatsContext=/*#__PURE__*/createContext();export const GlobalCardStatsProvider=_ref=>{let{children}=_ref;// Create state with initial values\nconst[globalCardStats,setGlobalCardStats]=useState(cloneDeep(initialGlobalCardStats));const[usePointDistributionSystem,setUsePointDistributionSystem]=useState(initialUsePointDistributionSystem);// Function to reset state\nconst resetGlobalCardStats=()=>{setGlobalCardStats(cloneDeep(initialGlobalCardStats));setUsePointDistributionSystem(initialUsePointDistributionSystem);};return/*#__PURE__*/_jsx(GlobalCardStatsContext.Provider,{value:{globalCardStats,setGlobalCardStats,usePointDistributionSystem,setUsePointDistributionSystem,resetGlobalCardStats},children:children});};// Custom hook to use the context\nexport const useGlobalCardStats=()=>{return useContext(GlobalCardStatsContext);};","map":{"version":3,"names":["React","createContext","useContext","useState","cloneDeep","jsx","_jsx","Card","constructor","cardName","cardSprite","AccuracyPoints","DefencePoints","DamagePoints","HealthPoints","rarity","Trigger","Effect","initialGlobalCardStats","healthRange","damageRange","defenceRange","accuracyRange","distributionPoints","initialUsePointDistributionSystem","GlobalCardStatsContext","GlobalCardStatsProvider","_ref","children","globalCardStats","setGlobalCardStats","usePointDistributionSystem","setUsePointDistributionSystem","resetGlobalCardStats","Provider","value","useGlobalCardStats"],"sources":["/Users/chacenielson/Documents/git-pull/card-generator/src/card-logic/CardStats.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\n\n\n// The card class with information about the card\nexport class Card {\n  constructor() {\n    this.cardName = \"\";\n    this.cardSprite = null;\n    this.AccuracyPoints = 0;\n    this.DefencePoints = 0;\n    this.DamagePoints = 0;\n    this.HealthPoints = 0;\n    this.rarity = null; \n    this.Trigger = \"\";\n    this.Effect = \"\";\n  }\n}\n\n// Initial values for context\nconst initialGlobalCardStats = {\n  healthRange: [2, 5],\n  damageRange: [1, 4],\n  defenceRange: [2, 4],\n  accuracyRange: [1, 5],\n  distributionPoints: 12\n};\n\nconst initialUsePointDistributionSystem = true;\n\n// Create context\nconst GlobalCardStatsContext = createContext();\n\nexport const GlobalCardStatsProvider = ({ children }) => {\n  // Create state with initial values\n  const [globalCardStats, setGlobalCardStats] = useState(cloneDeep(initialGlobalCardStats));\n  const [usePointDistributionSystem, setUsePointDistributionSystem] = useState(initialUsePointDistributionSystem);\n\n  // Function to reset state\n  const resetGlobalCardStats = () => {\n    setGlobalCardStats(cloneDeep(initialGlobalCardStats));\n    setUsePointDistributionSystem(initialUsePointDistributionSystem);\n  };\n\n  return (\n    <GlobalCardStatsContext.Provider value={{ globalCardStats, setGlobalCardStats, usePointDistributionSystem, setUsePointDistributionSystem, resetGlobalCardStats }}>\n      {children}\n    </GlobalCardStatsContext.Provider>\n  );\n};\n\n// Custom hook to use the context\nexport const useGlobalCardStats = () => {\n  return useContext(GlobalCardStatsContext);\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAQ,OAAO,CAClE,MAAO,CAAAC,SAAS,KAAM,kBAAkB,CAGxC;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,MAAO,MAAM,CAAAC,IAAK,CAChBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,QAAQ,CAAG,EAAE,CAClB,IAAI,CAACC,UAAU,CAAG,IAAI,CACtB,IAAI,CAACC,cAAc,CAAG,CAAC,CACvB,IAAI,CAACC,aAAa,CAAG,CAAC,CACtB,IAAI,CAACC,YAAY,CAAG,CAAC,CACrB,IAAI,CAACC,YAAY,CAAG,CAAC,CACrB,IAAI,CAACC,MAAM,CAAG,IAAI,CAClB,IAAI,CAACC,OAAO,CAAG,EAAE,CACjB,IAAI,CAACC,MAAM,CAAG,EAAE,CAClB,CACF,CAEA;AACA,KAAM,CAAAC,sBAAsB,CAAG,CAC7BC,WAAW,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CACnBC,WAAW,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CACnBC,YAAY,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CACpBC,aAAa,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CACrBC,kBAAkB,CAAE,EACtB,CAAC,CAED,KAAM,CAAAC,iCAAiC,CAAG,IAAI,CAE9C;AACA,KAAM,CAAAC,sBAAsB,cAAGxB,aAAa,CAAC,CAAC,CAE9C,MAAO,MAAM,CAAAyB,uBAAuB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAClD;AACA,KAAM,CAACE,eAAe,CAAEC,kBAAkB,CAAC,CAAG3B,QAAQ,CAACC,SAAS,CAACc,sBAAsB,CAAC,CAAC,CACzF,KAAM,CAACa,0BAA0B,CAAEC,6BAA6B,CAAC,CAAG7B,QAAQ,CAACqB,iCAAiC,CAAC,CAE/G;AACA,KAAM,CAAAS,oBAAoB,CAAGA,CAAA,GAAM,CACjCH,kBAAkB,CAAC1B,SAAS,CAACc,sBAAsB,CAAC,CAAC,CACrDc,6BAA6B,CAACR,iCAAiC,CAAC,CAClE,CAAC,CAED,mBACElB,IAAA,CAACmB,sBAAsB,CAACS,QAAQ,EAACC,KAAK,CAAE,CAAEN,eAAe,CAAEC,kBAAkB,CAAEC,0BAA0B,CAAEC,6BAA6B,CAAEC,oBAAqB,CAAE,CAAAL,QAAA,CAC9JA,QAAQ,CACsB,CAAC,CAEtC,CAAC,CAED;AACA,MAAO,MAAM,CAAAQ,kBAAkB,CAAGA,CAAA,GAAM,CACtC,MAAO,CAAAlC,UAAU,CAACuB,sBAAsB,CAAC,CAC3C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}