{"ast":null,"code":"import{Card}from'./CardStats';import{triggersAndEffects}from'./TriggersAndEffect';/**\r\n * Generates random card stats and assigns a random trigger and effect based on the card's rarity.\r\n * @param {Object} globalCardStats - The global card stats.\r\n * @param {boolean} usePointDistributionSystem - Flag to use the point distribution system.\r\n * @returns {Card} - The generated card with random stats, trigger, and effect.\r\n */function generateRandomCardStats(globalCardStats,usePointDistributionSystem){const card=new Card();if(usePointDistributionSystem){// Distribute points among the stats\nconst distributedStats=distributePoints(globalCardStats.distributionPoints,globalCardStats);card.HealthPoints=distributedStats.health;card.DamagePoints=distributedStats.damage;card.DefencePoints=distributedStats.defence;card.AccuracyPoints=distributedStats.accuracy;}else{// Assign random stats to the card within the defined ranges\ncard.AccuracyPoints=getRandomInt(globalCardStats.accuracyRange[0],globalCardStats.accuracyRange[1]+1);card.DefencePoints=getRandomInt(globalCardStats.defenceRange[0],globalCardStats.defenceRange[1]+1);card.DamagePoints=getRandomInt(globalCardStats.damageRange[0],globalCardStats.damageRange[1]+1);card.HealthPoints=getRandomInt(globalCardStats.healthRange[0],globalCardStats.healthRange[1]+1);}// Generate a random trigger and effect\nconst triggerEffect=generateRandomTriggerEffect();card.Trigger=triggerEffect.trigger;card.Effect=triggerEffect.effect;card.rarity=triggerEffect.rarity;return card;}/**\r\n * Distributes a given number of points across four stats while respecting min and max values.\r\n * @param {number} totalPoints - The total points to distribute.\r\n * @param {Object} globalCardStats - The global card stats.\r\n * @returns {Object} - An object containing the distributed stats.\r\n */function distributePoints(totalPoints,globalCardStats){// Initialize stats with their minimum values\nconst setStats={health:globalCardStats.healthRange[0],damage:globalCardStats.damageRange[0],defence:globalCardStats.defenceRange[0],accuracy:globalCardStats.accuracyRange[0]};// check to make sure the mak total points is not exceeded the max distribution points\nconst maxDistributionPoints=globalCardStats.healthRange[1]+globalCardStats.damageRange[1]+globalCardStats.defenceRange[1]+globalCardStats.accuracyRange[1];if(totalPoints>maxDistributionPoints){totalPoints=maxDistributionPoints;}// Calculate the points left after setting the minimum values\nvar pointsLeft=totalPoints-setStats.health-setStats.damage-setStats.defence-setStats.accuracy;let i=0;// Distribute the remaining points randomly\nwhile(pointsLeft>0){const stat=getRandomInt(0,4);switch(stat){case 0:if(setStats.health<globalCardStats.healthRange[1]){setStats.health++;pointsLeft--;}break;case 1:if(setStats.damage<globalCardStats.damageRange[1]){setStats.damage++;pointsLeft--;}break;case 2:if(setStats.defence<globalCardStats.defenceRange[1]){setStats.defence++;pointsLeft--;}break;case 3:if(setStats.accuracy<globalCardStats.accuracyRange[1]){setStats.accuracy++;pointsLeft--;}break;default:break;}// prevent the loop from running indefinitely\ni++;if(i>1000){break;}}return setStats;}/**\r\n * Generates a random trigger and effect based on their weights.\r\n * @returns {Object} - An object containing the selected trigger, effect, and rarity.\r\n */function generateRandomTriggerEffect(){// Select a random trigger based on weights\nconst trigger=getRandomElementWithWeight(triggersAndEffects);// Select a random effect from the chosen trigger's effects based on weights\nconst effect=getRandomElementWithWeight(trigger.effects);return{trigger:trigger.trigger,effect:effect.name,rarity:trigger.rarity};}/**\r\n * Selects a random element from an array based on their weights.\r\n * assumes a elemtent has a weight property of 1 if not provided in the element \r\n * @param {Array} elements - The array of elements to choose from.\r\n * @returns {Object} - The selected element.\r\n */function getRandomElementWithWeight(elements){const totalWeight=elements.reduce((acc,element)=>acc+(element.weight?parseFloat(element.weight):1),0);const randomValue=Math.random()*totalWeight;let cumulativeWeight=0;// Select an element based on the random value\nfor(const element of elements){cumulativeWeight+=element.weight?parseFloat(element.weight):1;if(randomValue<cumulativeWeight){return element;}}return elements[0];// Fallback to the first element if no element is selected\n}/**\r\n * Generates a random integer between the specified min (inclusive) and max (exclusive).\r\n * @param {number} min - The minimum value.\r\n * @param {number} max - The maximum value.\r\n * @returns {number} - The generated random integer.\r\n */function getRandomInt(min,max){return Math.floor(Math.random()*(max-min))+min;}export default generateRandomCardStats;","map":{"version":3,"names":["Card","triggersAndEffects","generateRandomCardStats","globalCardStats","usePointDistributionSystem","card","distributedStats","distributePoints","distributionPoints","HealthPoints","health","DamagePoints","damage","DefencePoints","defence","AccuracyPoints","accuracy","getRandomInt","accuracyRange","defenceRange","damageRange","healthRange","triggerEffect","generateRandomTriggerEffect","Trigger","trigger","Effect","effect","rarity","totalPoints","setStats","maxDistributionPoints","pointsLeft","i","stat","getRandomElementWithWeight","effects","name","elements","totalWeight","reduce","acc","element","weight","parseFloat","randomValue","Math","random","cumulativeWeight","min","max","floor"],"sources":["C:/Users/tosho/Desktop/CPSC471/Project/monster-mash-card-generator/src/card-logic/CardGenerator.js"],"sourcesContent":["import { Card } from './CardStats';\r\nimport { triggersAndEffects } from './TriggersAndEffect';\r\n\r\n/**\r\n * Generates random card stats and assigns a random trigger and effect based on the card's rarity.\r\n * @param {Object} globalCardStats - The global card stats.\r\n * @param {boolean} usePointDistributionSystem - Flag to use the point distribution system.\r\n * @returns {Card} - The generated card with random stats, trigger, and effect.\r\n */\r\nfunction generateRandomCardStats(globalCardStats, usePointDistributionSystem) {\r\n  const card = new Card();\r\n\r\n  if (usePointDistributionSystem) {\r\n    // Distribute points among the stats\r\n    const distributedStats = distributePoints(globalCardStats.distributionPoints, globalCardStats);\r\n    card.HealthPoints = distributedStats.health;\r\n    card.DamagePoints = distributedStats.damage;\r\n    card.DefencePoints = distributedStats.defence;\r\n    card.AccuracyPoints = distributedStats.accuracy;\r\n  } else {\r\n    // Assign random stats to the card within the defined ranges\r\n    card.AccuracyPoints = getRandomInt(\r\n      globalCardStats.accuracyRange[0], \r\n      globalCardStats.accuracyRange[1] + 1\r\n    );\r\n    card.DefencePoints = getRandomInt(\r\n      globalCardStats.defenceRange[0], \r\n      globalCardStats.defenceRange[1] + 1\r\n    );\r\n    card.DamagePoints = getRandomInt(\r\n      globalCardStats.damageRange[0], \r\n      globalCardStats.damageRange[1] + 1\r\n    );\r\n    card.HealthPoints = getRandomInt(\r\n      globalCardStats.healthRange[0], \r\n      globalCardStats.healthRange[1] + 1\r\n    );\r\n  }\r\n\r\n  // Generate a random trigger and effect\r\n  const triggerEffect = generateRandomTriggerEffect();\r\n  card.Trigger = triggerEffect.trigger;\r\n  card.Effect = triggerEffect.effect;\r\n  card.rarity = triggerEffect.rarity;\r\n\r\n  return card;\r\n}\r\n\r\n/**\r\n * Distributes a given number of points across four stats while respecting min and max values.\r\n * @param {number} totalPoints - The total points to distribute.\r\n * @param {Object} globalCardStats - The global card stats.\r\n * @returns {Object} - An object containing the distributed stats.\r\n */\r\nfunction distributePoints(totalPoints, globalCardStats) {\r\n  // Initialize stats with their minimum values\r\n  const setStats = {\r\n    health: globalCardStats.healthRange[0],\r\n    damage: globalCardStats.damageRange[0],\r\n    defence: globalCardStats.defenceRange[0],\r\n    accuracy: globalCardStats.accuracyRange[0]\r\n  };\r\n  \r\n  // check to make sure the mak total points is not exceeded the max distribution points\r\n  const maxDistributionPoints = globalCardStats.healthRange[1] + globalCardStats.damageRange[1] + globalCardStats.defenceRange[1] + globalCardStats.accuracyRange[1];\r\n\r\n  if (totalPoints > maxDistributionPoints) {\r\n    totalPoints = maxDistributionPoints\r\n  }\r\n\r\n  // Calculate the points left after setting the minimum values\r\n  var pointsLeft = totalPoints - setStats.health - setStats.damage - setStats.defence - setStats.accuracy;\r\n  \r\n\r\n\r\n  let i = 0\r\n  // Distribute the remaining points randomly\r\n  while (pointsLeft > 0) {\r\n    const stat = getRandomInt(0, 4);\r\n    switch (stat) {\r\n      case 0:\r\n        if (setStats.health < globalCardStats.healthRange[1]) {\r\n          setStats.health++;\r\n          pointsLeft--;\r\n        }\r\n        break;\r\n      case 1:\r\n        if (setStats.damage < globalCardStats.damageRange[1]) {\r\n          setStats.damage++;\r\n          pointsLeft--;\r\n        }\r\n        break;\r\n      case 2:\r\n        if (setStats.defence < globalCardStats.defenceRange[1]) {\r\n          setStats.defence++;\r\n          pointsLeft--;\r\n        }\r\n        break;\r\n      case 3:\r\n        if (setStats.accuracy < globalCardStats.accuracyRange[1]) {\r\n          setStats.accuracy++;\r\n          pointsLeft--;\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // prevent the loop from running indefinitely\r\n    i++\r\n    if (i > 1000) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return setStats;\r\n}\r\n\r\n/**\r\n * Generates a random trigger and effect based on their weights.\r\n * @returns {Object} - An object containing the selected trigger, effect, and rarity.\r\n */\r\nfunction generateRandomTriggerEffect() {\r\n  // Select a random trigger based on weights\r\n  const trigger = getRandomElementWithWeight(triggersAndEffects);\r\n  \r\n  // Select a random effect from the chosen trigger's effects based on weights\r\n  const effect = getRandomElementWithWeight(trigger.effects);\r\n\r\n  return { trigger: trigger.trigger, effect: effect.name, rarity: trigger.rarity };\r\n}\r\n\r\n/**\r\n * Selects a random element from an array based on their weights.\r\n * assumes a elemtent has a weight property of 1 if not provided in the element \r\n * @param {Array} elements - The array of elements to choose from.\r\n * @returns {Object} - The selected element.\r\n */\r\nfunction getRandomElementWithWeight(elements) {\r\n  const totalWeight = elements.reduce((acc, element) => acc + (element.weight ? parseFloat(element.weight) : 1), 0);\r\n  const randomValue = Math.random() * totalWeight;\r\n  let cumulativeWeight = 0;\r\n\r\n  // Select an element based on the random value\r\n  for (const element of elements) {\r\n    cumulativeWeight += (element.weight ? parseFloat(element.weight) : 1);\r\n    if (randomValue < cumulativeWeight) {\r\n      return element;\r\n    }\r\n  }\r\n\r\n  return elements[0]; // Fallback to the first element if no element is selected\r\n}\r\n\r\n\r\n/**\r\n * Generates a random integer between the specified min (inclusive) and max (exclusive).\r\n * @param {number} min - The minimum value.\r\n * @param {number} max - The maximum value.\r\n * @returns {number} - The generated random integer.\r\n */\r\nfunction getRandomInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nexport default generateRandomCardStats;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}