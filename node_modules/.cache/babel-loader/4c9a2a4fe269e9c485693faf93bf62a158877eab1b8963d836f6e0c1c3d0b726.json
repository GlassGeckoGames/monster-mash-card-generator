{"ast":null,"code":"import React,{useState}from'react';import Card from'./components/Card';import InfoModal from'./components/InfoModal';import EditParams from'./components/EditParams';import Button from'./components/Button';import generateRandomCardStats from'./card-logic/CardGenerator';import{generateRandomDefaultCard}from'./card-logic/DefaultCardData';import{useGlobalCardStats}from'./card-logic/CardStats';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function Main(){const{globalCardStats,usePointDistributionSystem}=useGlobalCardStats();const[card,setCard]=useState(null);const[isCustom,setIsCustom]=useState(true);const[customText,setCustomText]=useState('');const[customImage,setCustomImage]=useState(null);const[isModalOpen,setIsModalOpen]=useState(false);const[isEditParamsOpen,setIsEditParamsOpen]=useState(false);const[cardHistory,setCardHistory]=useState([]);const handleImageUpload=e=>{setCustomImage(URL.createObjectURL(e.target.files[0]));};const handleCustomTextChange=e=>{setCustomText(e.target.value);};const updateCardHistory=newCard=>{setCardHistory(prevHistory=>{const updatedHistory=[newCard,...prevHistory];return updatedHistory.slice(0,40);// Keep only the last 140 cards including active card\n});};const generateCustomCard=()=>{const newCard=generateRandomCardStats(globalCardStats,usePointDistributionSystem);newCard.cardName=customText;newCard.customSprite=customImage;setCard(newCard);updateCardHistory(newCard);};const generateDefaultCard=()=>{const defaultCard=generateRandomDefaultCard();const newCard=generateRandomCardStats(globalCardStats,usePointDistributionSystem);newCard.cardName=defaultCard.name;newCard.cardSprite=\"\".concat(process.env.PUBLIC_URL,\"/cardImages/\").concat(defaultCard.filePath);setCard(newCard);updateCardHistory(newCard);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-8 flex\",children:[/*#__PURE__*/_jsx(Button,{onClick:()=>setIsCustom(true),color:\"blue\",isActive:isCustom,className:\"mr-4\",children:\"Custom Cards\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>setIsCustom(false),color:\"green\",isActive:!isCustom,children:\"Default Cards\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>setIsModalOpen(true),color:\"yellow\",className:\"ml-4\",children:\"Game Info\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>setIsEditParamsOpen(true),color:\"yellow\",className:\"ml-4\",children:\"Edit Generation\"})]}),isCustom?/*#__PURE__*/_jsxs(\"div\",{className:\"mb-8\",children:[/*#__PURE__*/_jsx(\"input\",{id:\"file-upload\",type:\"file\",accept:\"image/png, image/jpeg, image/jpg\",onChange:handleImageUpload}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter Card Name\",value:customText,onChange:handleCustomTextChange,className:\"mb-4 p-2 border rounded-md mr-1\"}),/*#__PURE__*/_jsx(Button,{onClick:generateCustomCard,color:\"blue\",children:\"Generate Custom Card\"})]}):/*#__PURE__*/_jsx(Button,{onClick:generateDefaultCard,color:\"green\",className:\"mb-10\",children:\"Generate New Card\"}),card&&/*#__PURE__*/_jsx(Card,{card:card}),cardHistory.length>1&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"hr\",{className:\"mt-14 w-full border-2 border-blue-500\"}),/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-bold my-4 underline\",children:\"Card History\"}),/*#__PURE__*/_jsx(\"div\",{className:\"flex overflow-x-auto mt-8 pb-4 space-x-4 w-full\",children:/*#__PURE__*/_jsx(\"div\",{className:\"flex space-x-4 items-center\",children:cardHistory.slice(1).map((card,index)=>/*#__PURE__*/_jsxs(React.Fragment,{children:[index>0&&/*#__PURE__*/_jsx(\"div\",{className:\"h-full border-l-2 border-blue-500 mx-4\"}),/*#__PURE__*/_jsx(\"div\",{className:\"flex-shrink-0\",children:/*#__PURE__*/_jsx(Card,{card:card})})]},index))})})]}),/*#__PURE__*/_jsx(InfoModal,{isOpen:isModalOpen,onClose:()=>setIsModalOpen(false)}),/*#__PURE__*/_jsx(EditParams,{isOpen:isEditParamsOpen,onClose:()=>setIsEditParamsOpen(false)})]});}export default Main;","map":{"version":3,"names":["React","useState","Card","InfoModal","EditParams","Button","generateRandomCardStats","generateRandomDefaultCard","useGlobalCardStats","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Main","globalCardStats","usePointDistributionSystem","card","setCard","isCustom","setIsCustom","customText","setCustomText","customImage","setCustomImage","isModalOpen","setIsModalOpen","isEditParamsOpen","setIsEditParamsOpen","cardHistory","setCardHistory","handleImageUpload","e","URL","createObjectURL","target","files","handleCustomTextChange","value","updateCardHistory","newCard","prevHistory","updatedHistory","slice","generateCustomCard","cardName","customSprite","generateDefaultCard","defaultCard","name","cardSprite","concat","process","env","PUBLIC_URL","filePath","children","className","onClick","color","isActive","id","type","accept","onChange","placeholder","length","map","index","isOpen","onClose"],"sources":["/Users/chacenielson/Documents/git-pull/card-generator/src/Main.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Card from './components/Card';\nimport InfoModal from './components/InfoModal';\nimport EditParams from './components/EditParams';\nimport Button from './components/Button';\nimport generateRandomCardStats from './card-logic/CardGenerator';\nimport { generateRandomDefaultCard } from './card-logic/DefaultCardData';\nimport { useGlobalCardStats } from './card-logic/CardStats';\n\nfunction Main() {\n  const { globalCardStats, usePointDistributionSystem } = useGlobalCardStats();\n  const [card, setCard] = useState(null);\n  const [isCustom, setIsCustom] = useState(true);\n  const [customText, setCustomText] = useState('');\n  const [customImage, setCustomImage] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isEditParamsOpen, setIsEditParamsOpen] = useState(false);\n  const [cardHistory, setCardHistory] = useState([]);\n\n  const handleImageUpload = (e) => {\n    setCustomImage(URL.createObjectURL(e.target.files[0]));\n  };\n\n  const handleCustomTextChange = (e) => {\n    setCustomText(e.target.value);\n  };\n\n  const updateCardHistory = (newCard) => {\n    setCardHistory((prevHistory) => {\n      const updatedHistory = [newCard, ...prevHistory];\n      return updatedHistory.slice(0, 40); // Keep only the last 140 cards including active card\n    });\n  };\n\n  const generateCustomCard = () => {\n    const newCard = generateRandomCardStats(globalCardStats, usePointDistributionSystem);\n    newCard.cardName = customText;\n    newCard.customSprite = customImage;\n    setCard(newCard);\n    updateCardHistory(newCard);\n  };\n\n  const generateDefaultCard = () => {\n    const defaultCard = generateRandomDefaultCard();\n    const newCard = generateRandomCardStats(globalCardStats, usePointDistributionSystem);\n    newCard.cardName = defaultCard.name;\n    newCard.cardSprite = `${process.env.PUBLIC_URL}/cardImages/${defaultCard.filePath}`;\n    setCard(newCard);\n    updateCardHistory(newCard);\n  };\n\n  return (\n    <>\n      <div className=\"mb-8 flex\">\n        <Button\n          onClick={() => setIsCustom(true)}\n          color=\"blue\"\n          isActive={isCustom}\n          className=\"mr-4\"\n        >\n          Custom Cards\n        </Button>\n        <Button\n          onClick={() => setIsCustom(false)}\n          color=\"green\"\n          isActive={!isCustom}\n        >\n          Default Cards\n        </Button>\n        <Button\n          onClick={() => setIsModalOpen(true)}\n          color=\"yellow\"\n          className=\"ml-4\"\n        >\n          Game Info\n        </Button>\n        <Button\n          onClick={() => setIsEditParamsOpen(true)}\n          color=\"yellow\"\n          className=\"ml-4\"\n        >\n          Edit Generation\n        </Button>\n      </div>\n\n      {isCustom ? (\n        <div className=\"mb-8\">\n          <input\n            id=\"file-upload\"\n            type=\"file\"\n            accept=\"image/png, image/jpeg, image/jpg\"\n            onChange={handleImageUpload}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Enter Card Name\"\n            value={customText}\n            onChange={handleCustomTextChange}\n            className=\"mb-4 p-2 border rounded-md mr-1\"\n          />\n          <Button\n            onClick={generateCustomCard}\n            color=\"blue\"\n          >\n            Generate Custom Card\n          </Button>\n        </div>\n      ) : (\n        <Button\n          onClick={generateDefaultCard}\n          color=\"green\"\n          className=\"mb-10\"\n        >\n          Generate New Card\n        </Button>\n      )}\n\n      {card && (\n        <Card card={card} />\n      )}\n\n\n      {cardHistory.length > 1 && (\n        <>\n        <hr className=\"mt-14 w-full border-2 border-blue-500\" />\n        <h2 className=\"text-2xl font-bold my-4 underline\">Card History</h2>\n        <div className=\"flex overflow-x-auto mt-8 pb-4 space-x-4 w-full\">\n          <div className=\"flex space-x-4 items-center\">\n            {cardHistory.slice(1).map((card, index) => (\n              <React.Fragment key={index}>\n                {index > 0 && <div className=\"h-full border-l-2 border-blue-500 mx-4\"></div>}\n                <div className=\"flex-shrink-0\">\n                  <Card card={card} />\n                </div>\n              </React.Fragment>\n            ))}\n          </div>\n        </div>\n        </>\n      )}\n\n      <InfoModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} />\n      <EditParams \n        isOpen={isEditParamsOpen} \n        onClose={() => setIsEditParamsOpen(false)} \n      />\n    </>\n  );\n}\n\nexport default Main;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}