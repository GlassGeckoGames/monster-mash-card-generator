{"ast":null,"code":"import { Card, AbilityRarity, TextAndWeight } from './Card';\nimport GlobalCardStats from './GlobalCardStats';\nclass CardGenerator {\n  constructor(amount) {\n    this.amount = amount;\n    this.cards = [];\n    this.globalCardStats = new GlobalCardStats();\n  }\n  generateCards() {\n    this.cards = [];\n    for (let i = 0; i < this.amount; i++) {\n      this.cards.push(this.generateACard());\n    }\n  }\n  generateACard() {\n    const name = this.getRandomElement(this.globalCardStats.RandomNames);\n    const card = new Card();\n    card.cardName = name;\n    card.cardSprite = this.getRandomElement(this.globalCardStats.cardSprites);\n    card.cardAccessorySprite = this.getRandomElement(this.globalCardStats.cardAccessorySprites);\n    card.Accuracy = this.getRandomInt(this.globalCardStats.MinAccuracy, this.globalCardStats.MaxAccuracy + 1);\n    card.Retaliation = this.getRandomInt(this.globalCardStats.MinRetaliation, this.globalCardStats.MaxRetaliation + 1);\n    card.Damage = this.getRandomInt(this.globalCardStats.MinDamage, this.globalCardStats.MaxDamage + 1);\n    card.HealthPoints = this.getRandomInt(this.globalCardStats.MinHealthPoints, this.globalCardStats.MaxHealthPoints + 1);\n    card.abilityRarity = this.generateRandomRarity();\n    card.Trigger = this.generateRandomTrigger(card);\n    card.Effect = this.generateRandomEffect(card);\n    return card;\n  }\n  generateRandomRarity() {\n    const rarityWeights = {\n      [AbilityRarity.Common]: this.globalCardStats.CommonChance,\n      [AbilityRarity.Uncommon]: this.globalCardStats.UncommonChance,\n      [AbilityRarity.Rare]: this.globalCardStats.RareChance\n    };\n    const totalWeight = Object.values(rarityWeights).reduce((acc, weight) => acc + weight, 0);\n    const randomValue = this.getRandomInt(0, totalWeight);\n    let cumulativeWeight = 0;\n    for (const [rarity, weight] of Object.entries(rarityWeights)) {\n      cumulativeWeight += weight;\n      if (randomValue < cumulativeWeight) {\n        return rarity;\n      }\n    }\n    return AbilityRarity.Common;\n  }\n  generateRandomTrigger(card) {\n    if (card.abilityRarity === AbilityRarity.Common) {\n      return this.getRandomTextWithWeight(this.globalCardStats.CommonTriggers);\n    } else if (card.abilityRarity === AbilityRarity.Uncommon) {\n      return this.getRandomTextWithWeight(this.globalCardStats.UncommonTriggers);\n    } else if (card.abilityRarity === AbilityRarity.Rare) {\n      return this.getRandomTextWithWeight(this.globalCardStats.RareTriggers);\n    }\n    return \"\";\n  }\n  generateRandomEffect(card) {\n    let result = \"\";\n    if (card.abilityRarity === AbilityRarity.Common) {\n      result = this.getRandomTextWithWeight(this.globalCardStats.CommonEffects);\n    } else if (card.abilityRarity === AbilityRarity.Uncommon) {\n      result = this.getRandomTextWithWeight(this.globalCardStats.UncommonEffects);\n    } else if (card.abilityRarity === AbilityRarity.Rare) {\n      result = this.getRandomTextWithWeight(this.globalCardStats.RareEffects);\n    }\n    result = result.trim();\n    let loopCount = 0;\n    while ([this.globalCardStats.RollCommon, this.globalCardStats.RollUnCommon, this.globalCardStats.RollRare].includes(result)) {\n      loopCount++;\n      if (loopCount >= 2000) {\n        console.log(\"Infinite Loop\");\n        break;\n      }\n      if (result === this.globalCardStats.RollCommon) {\n        console.log(`${card.cardName} Rolled Common`);\n        result = this.getRandomTextWithWeight(this.globalCardStats.CommonEffects);\n      } else if (result === this.globalCardStats.RollUnCommon) {\n        console.log(`${card.cardName} Rolled UnCommon`);\n        result = this.getRandomTextWithWeight(this.globalCardStats.UncommonEffects);\n      } else if (result === this.globalCardStats.RollRare) {\n        console.log(`${card.cardName} Rolled Rare`);\n        result = this.getRandomTextWithWeight(this.globalCardStats.RareEffects);\n      }\n    }\n    return result;\n  }\n  getRandomTextWithWeight(textAndWeight) {\n    const texts = [];\n    textAndWeight.forEach(tw => {\n      for (let i = 0; i < tw.Weight; i++) {\n        texts.push(tw.Text);\n      }\n    });\n    return this.getRandomElement(texts);\n  }\n  getRandomElement(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n  getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n}\nmodule.exports = CardGenerator;","map":{"version":3,"names":["Card","AbilityRarity","TextAndWeight","GlobalCardStats","CardGenerator","constructor","amount","cards","globalCardStats","generateCards","i","push","generateACard","name","getRandomElement","RandomNames","card","cardName","cardSprite","cardSprites","cardAccessorySprite","cardAccessorySprites","Accuracy","getRandomInt","MinAccuracy","MaxAccuracy","Retaliation","MinRetaliation","MaxRetaliation","Damage","MinDamage","MaxDamage","HealthPoints","MinHealthPoints","MaxHealthPoints","abilityRarity","generateRandomRarity","Trigger","generateRandomTrigger","Effect","generateRandomEffect","rarityWeights","Common","CommonChance","Uncommon","UncommonChance","Rare","RareChance","totalWeight","Object","values","reduce","acc","weight","randomValue","cumulativeWeight","rarity","entries","getRandomTextWithWeight","CommonTriggers","UncommonTriggers","RareTriggers","result","CommonEffects","UncommonEffects","RareEffects","trim","loopCount","RollCommon","RollUnCommon","RollRare","includes","console","log","textAndWeight","texts","forEach","tw","Weight","Text","arr","Math","floor","random","length","min","max","module","exports"],"sources":["/Users/chacenielson/Documents/git-pull/card-generator/src/card-logic/CardGenerator.js"],"sourcesContent":["\nimport { Card, AbilityRarity, TextAndWeight } from './Card';\nimport GlobalCardStats from './GlobalCardStats';\n\nclass CardGenerator {\n  constructor(amount) {\n    this.amount = amount;\n    this.cards = [];\n    this.globalCardStats = new GlobalCardStats();\n  }\n\n  generateCards() {\n    this.cards = [];\n    for (let i = 0; i < this.amount; i++) {\n      this.cards.push(this.generateACard());\n    }\n  }\n\n  generateACard() {\n    const name = this.getRandomElement(this.globalCardStats.RandomNames);\n    const card = new Card();\n\n    card.cardName = name;\n    card.cardSprite = this.getRandomElement(this.globalCardStats.cardSprites);\n    card.cardAccessorySprite = this.getRandomElement(this.globalCardStats.cardAccessorySprites);\n\n    card.Accuracy = this.getRandomInt(this.globalCardStats.MinAccuracy, this.globalCardStats.MaxAccuracy + 1);\n    card.Retaliation = this.getRandomInt(this.globalCardStats.MinRetaliation, this.globalCardStats.MaxRetaliation + 1);\n    card.Damage = this.getRandomInt(this.globalCardStats.MinDamage, this.globalCardStats.MaxDamage + 1);\n    card.HealthPoints = this.getRandomInt(this.globalCardStats.MinHealthPoints, this.globalCardStats.MaxHealthPoints + 1);\n\n    card.abilityRarity = this.generateRandomRarity();\n\n    card.Trigger = this.generateRandomTrigger(card);\n    card.Effect = this.generateRandomEffect(card);\n\n    return card;\n  }\n\n  generateRandomRarity() {\n    const rarityWeights = {\n      [AbilityRarity.Common]: this.globalCardStats.CommonChance,\n      [AbilityRarity.Uncommon]: this.globalCardStats.UncommonChance,\n      [AbilityRarity.Rare]: this.globalCardStats.RareChance\n    };\n\n    const totalWeight = Object.values(rarityWeights).reduce((acc, weight) => acc + weight, 0);\n    const randomValue = this.getRandomInt(0, totalWeight);\n    let cumulativeWeight = 0;\n\n    for (const [rarity, weight] of Object.entries(rarityWeights)) {\n      cumulativeWeight += weight;\n      if (randomValue < cumulativeWeight) {\n        return rarity;\n      }\n    }\n\n    return AbilityRarity.Common;\n  }\n\n  generateRandomTrigger(card) {\n    if (card.abilityRarity === AbilityRarity.Common) {\n      return this.getRandomTextWithWeight(this.globalCardStats.CommonTriggers);\n    } else if (card.abilityRarity === AbilityRarity.Uncommon) {\n      return this.getRandomTextWithWeight(this.globalCardStats.UncommonTriggers);\n    } else if (card.abilityRarity === AbilityRarity.Rare) {\n      return this.getRandomTextWithWeight(this.globalCardStats.RareTriggers);\n    }\n    return \"\";\n  }\n\n  generateRandomEffect(card) {\n    let result = \"\";\n    if (card.abilityRarity === AbilityRarity.Common) {\n      result = this.getRandomTextWithWeight(this.globalCardStats.CommonEffects);\n    } else if (card.abilityRarity === AbilityRarity.Uncommon) {\n      result = this.getRandomTextWithWeight(this.globalCardStats.UncommonEffects);\n    } else if (card.abilityRarity === AbilityRarity.Rare) {\n      result = this.getRandomTextWithWeight(this.globalCardStats.RareEffects);\n    }\n\n    result = result.trim();\n    let loopCount = 0;\n\n    while ([this.globalCardStats.RollCommon, this.globalCardStats.RollUnCommon, this.globalCardStats.RollRare].includes(result)) {\n      loopCount++;\n      if (loopCount >= 2000) {\n        console.log(\"Infinite Loop\");\n        break;\n      }\n      if (result === this.globalCardStats.RollCommon) {\n        console.log(`${card.cardName} Rolled Common`);\n        result = this.getRandomTextWithWeight(this.globalCardStats.CommonEffects);\n      } else if (result === this.globalCardStats.RollUnCommon) {\n        console.log(`${card.cardName} Rolled UnCommon`);\n        result = this.getRandomTextWithWeight(this.globalCardStats.UncommonEffects);\n      } else if (result === this.globalCardStats.RollRare) {\n        console.log(`${card.cardName} Rolled Rare`);\n        result = this.getRandomTextWithWeight(this.globalCardStats.RareEffects);\n      }\n    }\n\n    return result;\n  }\n\n  getRandomTextWithWeight(textAndWeight) {\n    const texts = [];\n    textAndWeight.forEach(tw => {\n      for (let i = 0; i < tw.Weight; i++) {\n        texts.push(tw.Text);\n      }\n    });\n    return this.getRandomElement(texts);\n  }\n\n  getRandomElement(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n}\n\nmodule.exports = CardGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}