{"ast":null,"code":"import{Card,globalCardStats,triggersAndEffects}from'./CardStats';/**\n * Generates random card stats and assigns a random trigger and effect based on the card's rarity.\n * @returns {Card} - The generated card with random stats, trigger, and effect.\n */function generateRandomCardStats(){const card=new Card();// Assign random stats to the card within the defined ranges\ncard.Accuracy=getRandomInt(globalCardStats.accuracy[0],globalCardStats.accuracy[1]+1);card.Retaliation=getRandomInt(globalCardStats.defense[0],globalCardStats.defense[1]+1);card.Damage=getRandomInt(globalCardStats.damage[0],globalCardStats.damage[1]+1);card.HealthPoints=getRandomInt(globalCardStats.health[0],globalCardStats.health[1]+1);// Generate a random trigger and effect\nconst triggerEffect=generateRandomTriggerEffect();card.Trigger=triggerEffect.trigger;card.Effect=triggerEffect.effect;card.rarity=triggerEffect.rarity;return card;}/**\n * Generates a random trigger and effect based on their weights.\n * @returns {Object} - An object containing the selected trigger, effect, and rarity.\n */function generateRandomTriggerEffect(){// Select a random trigger based on weights\nconst trigger=getRandomElementWithWeight(triggersAndEffects);// Select a random effect from the chosen trigger's effects based on weights\nconst effect=getRandomElementWithWeight(trigger.effects);return{trigger:trigger.trigger,effect:effect.name,rarity:trigger.rarity};}/**\n * Selects a random element from an array based on their weights.\n * @param {Array} elements - The array of elements to choose from.\n * @returns {Object} - The selected element.\n */function getRandomElementWithWeight(elements){const totalWeight=elements.reduce((acc,element)=>acc+parseFloat(element.weight),0);const randomValue=Math.random()*totalWeight;let cumulativeWeight=0;// Select an element based on the random value\nfor(const element of elements){cumulativeWeight+=parseFloat(element.weight);if(randomValue<cumulativeWeight){return element;}}return elements[0];// Fallback to the first element if no element is selected\n}/**\n * Generates a random integer between the specified min (inclusive) and max (exclusive).\n * @param {number} min - The minimum value.\n * @param {number} max - The maximum value.\n * @returns {number} - The generated random integer.\n */function getRandomInt(min,max){return Math.floor(Math.random()*(max-min))+min;}export default generateRandomCardStats;","map":{"version":3,"names":["Card","globalCardStats","triggersAndEffects","generateRandomCardStats","card","Accuracy","getRandomInt","accuracy","Retaliation","defense","Damage","damage","HealthPoints","health","triggerEffect","generateRandomTriggerEffect","Trigger","trigger","Effect","effect","rarity","getRandomElementWithWeight","effects","name","elements","totalWeight","reduce","acc","element","parseFloat","weight","randomValue","Math","random","cumulativeWeight","min","max","floor"],"sources":["/Users/chacenielson/Documents/git-pull/card-generator/src/card-logic/CardGenerator.js"],"sourcesContent":["import { Card, globalCardStats, triggersAndEffects } from './CardStats';\n\n/**\n * Generates random card stats and assigns a random trigger and effect based on the card's rarity.\n * @returns {Card} - The generated card with random stats, trigger, and effect.\n */\nfunction generateRandomCardStats() {\n  const card = new Card();\n\n  // Assign random stats to the card within the defined ranges\n  card.Accuracy = getRandomInt(globalCardStats.accuracy[0], globalCardStats.accuracy[1] + 1);\n  card.Retaliation = getRandomInt(globalCardStats.defense[0], globalCardStats.defense[1] + 1);\n  card.Damage = getRandomInt(globalCardStats.damage[0], globalCardStats.damage[1] + 1);\n  card.HealthPoints = getRandomInt(globalCardStats.health[0], globalCardStats.health[1] + 1);\n\n  // Generate a random trigger and effect\n  const triggerEffect = generateRandomTriggerEffect();\n  card.Trigger = triggerEffect.trigger;\n  card.Effect = triggerEffect.effect;\n  card.rarity = triggerEffect.rarity;\n\n  return card;\n}\n\n/**\n * Generates a random trigger and effect based on their weights.\n * @returns {Object} - An object containing the selected trigger, effect, and rarity.\n */\nfunction generateRandomTriggerEffect() {\n  // Select a random trigger based on weights\n  const trigger = getRandomElementWithWeight(triggersAndEffects);\n  \n  // Select a random effect from the chosen trigger's effects based on weights\n  const effect = getRandomElementWithWeight(trigger.effects);\n\n  return { trigger: trigger.trigger, effect: effect.name, rarity: trigger.rarity };\n}\n\n/**\n * Selects a random element from an array based on their weights.\n * @param {Array} elements - The array of elements to choose from.\n * @returns {Object} - The selected element.\n */\nfunction getRandomElementWithWeight(elements) {\n  const totalWeight = elements.reduce((acc, element) => acc + parseFloat(element.weight), 0);\n  const randomValue = Math.random() * totalWeight;\n  let cumulativeWeight = 0;\n\n  // Select an element based on the random value\n  for (const element of elements) {\n    cumulativeWeight += parseFloat(element.weight);\n    if (randomValue < cumulativeWeight) {\n      return element;\n    }\n  }\n\n  return elements[0]; // Fallback to the first element if no element is selected\n}\n\n/**\n * Generates a random integer between the specified min (inclusive) and max (exclusive).\n * @param {number} min - The minimum value.\n * @param {number} max - The maximum value.\n * @returns {number} - The generated random integer.\n */\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport default generateRandomCardStats;\n"],"mappings":"AAAA,OAASA,IAAI,CAAEC,eAAe,CAAEC,kBAAkB,KAAQ,aAAa,CAEvE;AACA;AACA;AACA,GACA,QAAS,CAAAC,uBAAuBA,CAAA,CAAG,CACjC,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAJ,IAAI,CAAC,CAAC,CAEvB;AACAI,IAAI,CAACC,QAAQ,CAAGC,YAAY,CAACL,eAAe,CAACM,QAAQ,CAAC,CAAC,CAAC,CAAEN,eAAe,CAACM,QAAQ,CAAC,CAAC,CAAC,CAAG,CAAC,CAAC,CAC1FH,IAAI,CAACI,WAAW,CAAGF,YAAY,CAACL,eAAe,CAACQ,OAAO,CAAC,CAAC,CAAC,CAAER,eAAe,CAACQ,OAAO,CAAC,CAAC,CAAC,CAAG,CAAC,CAAC,CAC3FL,IAAI,CAACM,MAAM,CAAGJ,YAAY,CAACL,eAAe,CAACU,MAAM,CAAC,CAAC,CAAC,CAAEV,eAAe,CAACU,MAAM,CAAC,CAAC,CAAC,CAAG,CAAC,CAAC,CACpFP,IAAI,CAACQ,YAAY,CAAGN,YAAY,CAACL,eAAe,CAACY,MAAM,CAAC,CAAC,CAAC,CAAEZ,eAAe,CAACY,MAAM,CAAC,CAAC,CAAC,CAAG,CAAC,CAAC,CAE1F;AACA,KAAM,CAAAC,aAAa,CAAGC,2BAA2B,CAAC,CAAC,CACnDX,IAAI,CAACY,OAAO,CAAGF,aAAa,CAACG,OAAO,CACpCb,IAAI,CAACc,MAAM,CAAGJ,aAAa,CAACK,MAAM,CAClCf,IAAI,CAACgB,MAAM,CAAGN,aAAa,CAACM,MAAM,CAElC,MAAO,CAAAhB,IAAI,CACb,CAEA;AACA;AACA;AACA,GACA,QAAS,CAAAW,2BAA2BA,CAAA,CAAG,CACrC;AACA,KAAM,CAAAE,OAAO,CAAGI,0BAA0B,CAACnB,kBAAkB,CAAC,CAE9D;AACA,KAAM,CAAAiB,MAAM,CAAGE,0BAA0B,CAACJ,OAAO,CAACK,OAAO,CAAC,CAE1D,MAAO,CAAEL,OAAO,CAAEA,OAAO,CAACA,OAAO,CAAEE,MAAM,CAAEA,MAAM,CAACI,IAAI,CAAEH,MAAM,CAAEH,OAAO,CAACG,MAAO,CAAC,CAClF,CAEA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,0BAA0BA,CAACG,QAAQ,CAAE,CAC5C,KAAM,CAAAC,WAAW,CAAGD,QAAQ,CAACE,MAAM,CAAC,CAACC,GAAG,CAAEC,OAAO,GAAKD,GAAG,CAAGE,UAAU,CAACD,OAAO,CAACE,MAAM,CAAC,CAAE,CAAC,CAAC,CAC1F,KAAM,CAAAC,WAAW,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGR,WAAW,CAC/C,GAAI,CAAAS,gBAAgB,CAAG,CAAC,CAExB;AACA,IAAK,KAAM,CAAAN,OAAO,GAAI,CAAAJ,QAAQ,CAAE,CAC9BU,gBAAgB,EAAIL,UAAU,CAACD,OAAO,CAACE,MAAM,CAAC,CAC9C,GAAIC,WAAW,CAAGG,gBAAgB,CAAE,CAClC,MAAO,CAAAN,OAAO,CAChB,CACF,CAEA,MAAO,CAAAJ,QAAQ,CAAC,CAAC,CAAC,CAAE;AACtB,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAlB,YAAYA,CAAC6B,GAAG,CAAEC,GAAG,CAAE,CAC9B,MAAO,CAAAJ,IAAI,CAACK,KAAK,CAACL,IAAI,CAACC,MAAM,CAAC,CAAC,EAAIG,GAAG,CAAGD,GAAG,CAAC,CAAC,CAAGA,GAAG,CACtD,CAEA,cAAe,CAAAhC,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}