{"ast":null,"code":"import { Card, AbilityRarity } from './Card';\nimport { GlobalCardStats } from './GlobalCardStats';\nfunction generateRandomCard() {\n  const card = new Card();\n  card.Accuracy = getRandomInt(GlobalCardStats.MinAccuracy, GlobalCardStats.MaxAccuracy + 1);\n  card.Retaliation = getRandomInt(GlobalCardStats.MinRetaliation, GlobalCardStats.MaxRetaliation + 1);\n  card.Damage = getRandomInt(GlobalCardStats.MinDamage, GlobalCardStats.MaxDamage + 1);\n  card.HealthPoints = getRandomInt(GlobalCardStats.MinHealthPoints, GlobalCardStats.MaxHealthPoints + 1);\n  card.abilityRarity = generateRandomRarity();\n  card.Trigger = generateRandomTrigger(card);\n  card.Effect = generateRandomEffect(card);\n  return card;\n}\nfunction generateRandomRarity() {\n  const rarityWeights = {\n    [AbilityRarity.Common]: GlobalCardStats.CommonChance,\n    [AbilityRarity.Uncommon]: GlobalCardStats.UncommonChance,\n    [AbilityRarity.Rare]: GlobalCardStats.RareChance\n  };\n  const totalWeight = Object.values(rarityWeights).reduce((acc, weight) => acc + weight, 0);\n  const randomValue = getRandomInt(0, totalWeight);\n  let cumulativeWeight = 0;\n  for (const [rarity, weight] of Object.entries(rarityWeights)) {\n    cumulativeWeight += weight;\n    if (randomValue < cumulativeWeight) {\n      return rarity;\n    }\n  }\n  return AbilityRarity.Common;\n}\nfunction generateRandomTrigger(card) {\n  if (card.abilityRarity === AbilityRarity.Common) {\n    return getRandomTextWithWeight(GlobalCardStats.CommonTriggers);\n  } else if (card.abilityRarity === AbilityRarity.Uncommon) {\n    return getRandomTextWithWeight(GlobalCardStats.UncommonTriggers);\n  } else if (card.abilityRarity === AbilityRarity.Rare) {\n    return getRandomTextWithWeight(GlobalCardStats.RareTriggers);\n  }\n  return \"\";\n}\nfunction generateRandomEffect(card) {\n  let result = \"\";\n  if (card.abilityRarity === AbilityRarity.Common) {\n    result = getRandomTextWithWeight(GlobalCardStats.CommonEffects);\n  } else if (card.abilityRarity === AbilityRarity.Uncommon) {\n    result = getRandomTextWithWeight(GlobalCardStats.UncommonEffects);\n  } else if (card.abilityRarity === AbilityRarity.Rare) {\n    result = getRandomTextWithWeight(GlobalCardStats.RareEffects);\n  }\n  result = result.trim();\n  let loopCount = 0;\n  while ([GlobalCardStats.RollCommon, GlobalCardStats.RollUnCommon, GlobalCardStats.RollRare].includes(result)) {\n    loopCount++;\n    if (loopCount >= 2000) {\n      console.log(\"Infinite Loop\");\n      break;\n    }\n    if (result === GlobalCardStats.RollCommon) {\n      console.log(`Rolled Common`);\n      result = getRandomTextWithWeight(GlobalCardStats.CommonEffects);\n    } else if (result === GlobalCardStats.RollUnCommon) {\n      console.log(`Rolled UnCommon`);\n      result = getRandomTextWithWeight(GlobalCardStats.UncommonEffects);\n    } else if (result === GlobalCardStats.RollRare) {\n      console.log(`Rolled Rare`);\n      result = getRandomTextWithWeight(GlobalCardStats.RareEffects);\n    }\n  }\n  return result;\n}\nfunction getRandomTextWithWeight(textAndWeight) {\n  const texts = [];\n  textAndWeight.forEach(tw => {\n    for (let i = 0; i < tw.Weight; i++) {\n      texts.push(tw.Text);\n    }\n  });\n  return getRandomElement(texts);\n}\nfunction getRandomElement(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nexport default generateRandomCard;","map":{"version":3,"names":["Card","AbilityRarity","GlobalCardStats","generateRandomCard","card","Accuracy","getRandomInt","MinAccuracy","MaxAccuracy","Retaliation","MinRetaliation","MaxRetaliation","Damage","MinDamage","MaxDamage","HealthPoints","MinHealthPoints","MaxHealthPoints","abilityRarity","generateRandomRarity","Trigger","generateRandomTrigger","Effect","generateRandomEffect","rarityWeights","Common","CommonChance","Uncommon","UncommonChance","Rare","RareChance","totalWeight","Object","values","reduce","acc","weight","randomValue","cumulativeWeight","rarity","entries","getRandomTextWithWeight","CommonTriggers","UncommonTriggers","RareTriggers","result","CommonEffects","UncommonEffects","RareEffects","trim","loopCount","RollCommon","RollUnCommon","RollRare","includes","console","log","textAndWeight","texts","forEach","tw","i","Weight","push","Text","getRandomElement","arr","Math","floor","random","length","min","max"],"sources":["/Users/chacenielson/Documents/git-pull/card-generator/src/card-logic/CardGenerator.js"],"sourcesContent":["import { Card, AbilityRarity } from './Card';\nimport { GlobalCardStats } from './GlobalCardStats';\n\nfunction generateRandomCard() {\n  const card = new Card();\n\n  card.Accuracy = getRandomInt(GlobalCardStats.MinAccuracy, GlobalCardStats.MaxAccuracy + 1);\n  card.Retaliation = getRandomInt(GlobalCardStats.MinRetaliation, GlobalCardStats.MaxRetaliation + 1);\n  card.Damage = getRandomInt(GlobalCardStats.MinDamage, GlobalCardStats.MaxDamage + 1);\n  card.HealthPoints = getRandomInt(GlobalCardStats.MinHealthPoints, GlobalCardStats.MaxHealthPoints + 1);\n\n  card.abilityRarity = generateRandomRarity();\n\n  card.Trigger = generateRandomTrigger(card);\n  card.Effect = generateRandomEffect(card);\n\n  return card;\n}\n\nfunction generateRandomRarity() {\n  const rarityWeights = {\n    [AbilityRarity.Common]: GlobalCardStats.CommonChance,\n    [AbilityRarity.Uncommon]: GlobalCardStats.UncommonChance,\n    [AbilityRarity.Rare]: GlobalCardStats.RareChance\n  };\n\n  const totalWeight = Object.values(rarityWeights).reduce((acc, weight) => acc + weight, 0);\n  const randomValue = getRandomInt(0, totalWeight);\n  let cumulativeWeight = 0;\n\n  for (const [rarity, weight] of Object.entries(rarityWeights)) {\n    cumulativeWeight += weight;\n    if (randomValue < cumulativeWeight) {\n      return rarity;\n    }\n  }\n\n  return AbilityRarity.Common;\n}\n\nfunction generateRandomTrigger(card) {\n  if (card.abilityRarity === AbilityRarity.Common) {\n    return getRandomTextWithWeight(GlobalCardStats.CommonTriggers);\n  } else if (card.abilityRarity === AbilityRarity.Uncommon) {\n    return getRandomTextWithWeight(GlobalCardStats.UncommonTriggers);\n  } else if (card.abilityRarity === AbilityRarity.Rare) {\n    return getRandomTextWithWeight(GlobalCardStats.RareTriggers);\n  }\n  return \"\";\n}\n\nfunction generateRandomEffect(card) {\n  let result = \"\";\n  if (card.abilityRarity === AbilityRarity.Common) {\n    result = getRandomTextWithWeight(GlobalCardStats.CommonEffects);\n  } else if (card.abilityRarity === AbilityRarity.Uncommon) {\n    result = getRandomTextWithWeight(GlobalCardStats.UncommonEffects);\n  } else if (card.abilityRarity === AbilityRarity.Rare) {\n    result = getRandomTextWithWeight(GlobalCardStats.RareEffects);\n  }\n\n  result = result.trim();\n  let loopCount = 0;\n\n  while ([GlobalCardStats.RollCommon, GlobalCardStats.RollUnCommon, GlobalCardStats.RollRare].includes(result)) {\n    loopCount++;\n    if (loopCount >= 2000) {\n      console.log(\"Infinite Loop\");\n      break;\n    }\n    if (result === GlobalCardStats.RollCommon) {\n      console.log(`Rolled Common`);\n      result = getRandomTextWithWeight(GlobalCardStats.CommonEffects);\n    } else if (result === GlobalCardStats.RollUnCommon) {\n      console.log(`Rolled UnCommon`);\n      result = getRandomTextWithWeight(GlobalCardStats.UncommonEffects);\n    } else if (result === GlobalCardStats.RollRare) {\n      console.log(`Rolled Rare`);\n      result = getRandomTextWithWeight(GlobalCardStats.RareEffects);\n    }\n  }\n\n  return result;\n}\n\nfunction getRandomTextWithWeight(textAndWeight) {\n  const texts = [];\n  textAndWeight.forEach(tw => {\n    for (let i = 0; i < tw.Weight; i++) {\n      texts.push(tw.Text);\n    }\n  });\n  return getRandomElement(texts);\n}\n\nfunction getRandomElement(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport default generateRandomCard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}