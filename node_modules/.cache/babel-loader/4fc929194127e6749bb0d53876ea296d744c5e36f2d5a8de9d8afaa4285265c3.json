{"ast":null,"code":"import { Card, globalCardStats, triggersAndEffects } from './CardStats';\n\n/**\n * Generates random card stats and assigns a random trigger and effect based on the card's rarity.\n * @returns {Card} - The generated card with random stats, trigger, and effect.\n */\nfunction generateRandomCardStats() {\n  const card = new Card();\n  const usePointDistribution = false;\n  if (usePointDistribution) {\n    // card.distributionPoints\n    // \n\n    // Assign random stats to the card within the defined ranges\n    card.Accuracy = getRandomInt(globalCardStats.accuracy[0], globalCardStats.accuracy[1] + 1);\n    card.Retaliation = getRandomInt(globalCardStats.defense[0], globalCardStats.defense[1] + 1);\n    card.Damage = getRandomInt(globalCardStats.damage[0], globalCardStats.damage[1] + 1);\n    card.HealthPoints = getRandomInt(globalCardStats.health[0], globalCardStats.health[1] + 1);\n  } else {\n    // Assign random stats to the card within the defined ranges\n    card.Accuracy = getRandomInt(globalCardStats.accuracy[0], globalCardStats.accuracy[1] + 1);\n    card.Retaliation = getRandomInt(globalCardStats.defense[0], globalCardStats.defense[1] + 1);\n    card.Damage = getRandomInt(globalCardStats.damage[0], globalCardStats.damage[1] + 1);\n    card.HealthPoints = getRandomInt(globalCardStats.health[0], globalCardStats.health[1] + 1);\n  }\n  // Generate a random trigger and effect\n  const triggerEffect = generateRandomTriggerEffect();\n  card.Trigger = triggerEffect.trigger;\n  card.Effect = triggerEffect.effect;\n  card.rarity = triggerEffect.rarity;\n  return card;\n}\n\n/**\n * Generates a random trigger and effect based on their weights.\n * @returns {Object} - An object containing the selected trigger, effect, and rarity.\n */\nfunction generateRandomTriggerEffect() {\n  // Select a random trigger based on weights\n  const trigger = getRandomElementWithWeight(triggersAndEffects);\n\n  // Select a random effect from the chosen trigger's effects based on weights\n  const effect = getRandomElementWithWeight(trigger.effects);\n  return {\n    trigger: trigger.trigger,\n    effect: effect.name,\n    rarity: trigger.rarity\n  };\n}\n\n/**\n * Selects a random element from an array based on their weights.\n * @param {Array} elements - The array of elements to choose from.\n * @returns {Object} - The selected element.\n */\nfunction getRandomElementWithWeight(elements) {\n  const totalWeight = elements.reduce((acc, element) => acc + parseFloat(element.weight), 0);\n  const randomValue = Math.random() * totalWeight;\n  let cumulativeWeight = 0;\n\n  // Select an element based on the random value\n  for (const element of elements) {\n    cumulativeWeight += parseFloat(element.weight);\n    if (randomValue < cumulativeWeight) {\n      return element;\n    }\n  }\n  return elements[0]; // Fallback to the first element if no element is selected\n}\n\n/**\n * Generates a random integer between the specified min (inclusive) and max (exclusive).\n * @param {number} min - The minimum value.\n * @param {number} max - The maximum value.\n * @returns {number} - The generated random integer.\n */\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nexport default generateRandomCardStats;","map":{"version":3,"names":["Card","globalCardStats","triggersAndEffects","generateRandomCardStats","card","usePointDistribution","Accuracy","getRandomInt","accuracy","Retaliation","defense","Damage","damage","HealthPoints","health","triggerEffect","generateRandomTriggerEffect","Trigger","trigger","Effect","effect","rarity","getRandomElementWithWeight","effects","name","elements","totalWeight","reduce","acc","element","parseFloat","weight","randomValue","Math","random","cumulativeWeight","min","max","floor"],"sources":["/Users/chacenielson/Documents/git-pull/card-generator/src/card-logic/CardGenerator.js"],"sourcesContent":["import { Card, globalCardStats, triggersAndEffects } from './CardStats';\n\n/**\n * Generates random card stats and assigns a random trigger and effect based on the card's rarity.\n * @returns {Card} - The generated card with random stats, trigger, and effect.\n */\nfunction generateRandomCardStats() {\n  const card = new Card();\n\n  const usePointDistribution = false\n\n  if (usePointDistribution){\n\n\n    // card.distributionPoints\n    // \n\n\n    // Assign random stats to the card within the defined ranges\n    card.Accuracy = getRandomInt(globalCardStats.accuracy[0], globalCardStats.accuracy[1] + 1);\n    card.Retaliation = getRandomInt(globalCardStats.defense[0], globalCardStats.defense[1] + 1);\n    card.Damage = getRandomInt(globalCardStats.damage[0], globalCardStats.damage[1] + 1);\n    card.HealthPoints = getRandomInt(globalCardStats.health[0], globalCardStats.health[1] + 1);\n\n\n\n  }else{\n    // Assign random stats to the card within the defined ranges\n    card.Accuracy = getRandomInt(globalCardStats.accuracy[0], globalCardStats.accuracy[1] + 1);\n    card.Retaliation = getRandomInt(globalCardStats.defense[0], globalCardStats.defense[1] + 1);\n    card.Damage = getRandomInt(globalCardStats.damage[0], globalCardStats.damage[1] + 1);\n    card.HealthPoints = getRandomInt(globalCardStats.health[0], globalCardStats.health[1] + 1);\n\n  }\n  // Generate a random trigger and effect\n  const triggerEffect = generateRandomTriggerEffect();\n  card.Trigger = triggerEffect.trigger;\n  card.Effect = triggerEffect.effect;\n  card.rarity = triggerEffect.rarity;\n\n  return card;\n}\n\n/**\n * Generates a random trigger and effect based on their weights.\n * @returns {Object} - An object containing the selected trigger, effect, and rarity.\n */\nfunction generateRandomTriggerEffect() {\n  // Select a random trigger based on weights\n  const trigger = getRandomElementWithWeight(triggersAndEffects);\n  \n  // Select a random effect from the chosen trigger's effects based on weights\n  const effect = getRandomElementWithWeight(trigger.effects);\n\n  return { trigger: trigger.trigger, effect: effect.name, rarity: trigger.rarity };\n}\n\n/**\n * Selects a random element from an array based on their weights.\n * @param {Array} elements - The array of elements to choose from.\n * @returns {Object} - The selected element.\n */\nfunction getRandomElementWithWeight(elements) {\n  const totalWeight = elements.reduce((acc, element) => acc + parseFloat(element.weight), 0);\n  const randomValue = Math.random() * totalWeight;\n  let cumulativeWeight = 0;\n\n  // Select an element based on the random value\n  for (const element of elements) {\n    cumulativeWeight += parseFloat(element.weight);\n    if (randomValue < cumulativeWeight) {\n      return element;\n    }\n  }\n\n  return elements[0]; // Fallback to the first element if no element is selected\n}\n\n/**\n * Generates a random integer between the specified min (inclusive) and max (exclusive).\n * @param {number} min - The minimum value.\n * @param {number} max - The maximum value.\n * @returns {number} - The generated random integer.\n */\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport default generateRandomCardStats;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}