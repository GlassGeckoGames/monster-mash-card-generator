{"ast":null,"code":"import{Card,AbilityRarity}from'./Card';import{GlobalCardStats}from'./GlobalCardStats';function generateRandomCardStats(){const card=new Card();card.Accuracy=getRandomInt(GlobalCardStats.MinAccuracy,GlobalCardStats.MaxAccuracy+1);card.Retaliation=getRandomInt(GlobalCardStats.MinRetaliation,GlobalCardStats.MaxRetaliation+1);card.Damage=getRandomInt(GlobalCardStats.MinDamage,GlobalCardStats.MaxDamage+1);card.HealthPoints=getRandomInt(GlobalCardStats.MinHealthPoints,GlobalCardStats.MaxHealthPoints+1);card.abilityRarity=generateRandomRarity();card.Trigger=generateRandomTrigger(card);card.Effect=generateRandomEffect(card);return card;}function generateRandomRarity(){const rarityWeights={[AbilityRarity.Common]:GlobalCardStats.CommonChance,[AbilityRarity.Uncommon]:GlobalCardStats.UncommonChance,[AbilityRarity.Rare]:GlobalCardStats.RareChance};const totalWeight=Object.values(rarityWeights).reduce((acc,weight)=>acc+weight,0);const randomValue=getRandomInt(0,totalWeight);let cumulativeWeight=0;for(const[rarity,weight]of Object.entries(rarityWeights)){cumulativeWeight+=weight;if(randomValue<cumulativeWeight){return rarity;}}return AbilityRarity.Common;}function generateRandomTrigger(card){if(card.abilityRarity===AbilityRarity.Common){return getRandomTextWithWeight(GlobalCardStats.CommonTriggers);}else if(card.abilityRarity===AbilityRarity.Uncommon){return getRandomTextWithWeight(GlobalCardStats.UncommonTriggers);}else if(card.abilityRarity===AbilityRarity.Rare){return getRandomTextWithWeight(GlobalCardStats.RareTriggers);}return\"\";}function generateRandomEffect(card){let result=\"\";if(card.abilityRarity===AbilityRarity.Common){result=getRandomTextWithWeight(GlobalCardStats.CommonEffects);}else if(card.abilityRarity===AbilityRarity.Uncommon){result=getRandomTextWithWeight(GlobalCardStats.UncommonEffects);}else if(card.abilityRarity===AbilityRarity.Rare){result=getRandomTextWithWeight(GlobalCardStats.RareEffects);}result=result.trim();let loopCount=0;while([GlobalCardStats.RollCommon,GlobalCardStats.RollUnCommon,GlobalCardStats.RollRare].includes(result)){loopCount++;if(loopCount>=2000){console.log(\"Infinite Loop\");break;}if(result===GlobalCardStats.RollCommon){console.log(\"Rolled Common\");result=getRandomTextWithWeight(GlobalCardStats.CommonEffects);}else if(result===GlobalCardStats.RollUnCommon){console.log(\"Rolled UnCommon\");result=getRandomTextWithWeight(GlobalCardStats.UncommonEffects);}else if(result===GlobalCardStats.RollRare){console.log(\"Rolled Rare\");result=getRandomTextWithWeight(GlobalCardStats.RareEffects);}}return result;}function getRandomTextWithWeight(textAndWeight){const texts=[];textAndWeight.forEach(tw=>{for(let i=0;i<tw.Weight;i++){texts.push(tw.Text);}});return getRandomElement(texts);}function getRandomElement(arr){return arr[Math.floor(Math.random()*arr.length)];}function getRandomInt(min,max){return Math.floor(Math.random()*(max-min))+min;}export default generateRandomCardStats;","map":{"version":3,"names":["Card","AbilityRarity","GlobalCardStats","generateRandomCardStats","card","Accuracy","getRandomInt","MinAccuracy","MaxAccuracy","Retaliation","MinRetaliation","MaxRetaliation","Damage","MinDamage","MaxDamage","HealthPoints","MinHealthPoints","MaxHealthPoints","abilityRarity","generateRandomRarity","Trigger","generateRandomTrigger","Effect","generateRandomEffect","rarityWeights","Common","CommonChance","Uncommon","UncommonChance","Rare","RareChance","totalWeight","Object","values","reduce","acc","weight","randomValue","cumulativeWeight","rarity","entries","getRandomTextWithWeight","CommonTriggers","UncommonTriggers","RareTriggers","result","CommonEffects","UncommonEffects","RareEffects","trim","loopCount","RollCommon","RollUnCommon","RollRare","includes","console","log","textAndWeight","texts","forEach","tw","i","Weight","push","Text","getRandomElement","arr","Math","floor","random","length","min","max"],"sources":["/Users/chacenielson/Documents/git-pull/card-generator/src/card-logic/CardGenerator.js"],"sourcesContent":["import { Card, AbilityRarity } from './Card';\nimport { GlobalCardStats } from './GlobalCardStats';\n\nfunction generateRandomCardStats() {\n  const card = new Card();\n\n  card.Accuracy = getRandomInt(GlobalCardStats.MinAccuracy, GlobalCardStats.MaxAccuracy + 1);\n  card.Retaliation = getRandomInt(GlobalCardStats.MinRetaliation, GlobalCardStats.MaxRetaliation + 1);\n  card.Damage = getRandomInt(GlobalCardStats.MinDamage, GlobalCardStats.MaxDamage + 1);\n  card.HealthPoints = getRandomInt(GlobalCardStats.MinHealthPoints, GlobalCardStats.MaxHealthPoints + 1);\n\n  card.abilityRarity = generateRandomRarity();\n\n  card.Trigger = generateRandomTrigger(card);\n  card.Effect = generateRandomEffect(card);\n\n  return card;\n}\n\nfunction generateRandomRarity() {\n  const rarityWeights = {\n    [AbilityRarity.Common]: GlobalCardStats.CommonChance,\n    [AbilityRarity.Uncommon]: GlobalCardStats.UncommonChance,\n    [AbilityRarity.Rare]: GlobalCardStats.RareChance\n  };\n\n  const totalWeight = Object.values(rarityWeights).reduce((acc, weight) => acc + weight, 0);\n  const randomValue = getRandomInt(0, totalWeight);\n  let cumulativeWeight = 0;\n\n  for (const [rarity, weight] of Object.entries(rarityWeights)) {\n    cumulativeWeight += weight;\n    if (randomValue < cumulativeWeight) {\n      return rarity;\n    }\n  }\n\n  return AbilityRarity.Common;\n}\n\nfunction generateRandomTrigger(card) {\n  if (card.abilityRarity === AbilityRarity.Common) {\n    return getRandomTextWithWeight(GlobalCardStats.CommonTriggers);\n  } else if (card.abilityRarity === AbilityRarity.Uncommon) {\n    return getRandomTextWithWeight(GlobalCardStats.UncommonTriggers);\n  } else if (card.abilityRarity === AbilityRarity.Rare) {\n    return getRandomTextWithWeight(GlobalCardStats.RareTriggers);\n  }\n  return \"\";\n}\n\nfunction generateRandomEffect(card) {\n  let result = \"\";\n  if (card.abilityRarity === AbilityRarity.Common) {\n    result = getRandomTextWithWeight(GlobalCardStats.CommonEffects);\n  } else if (card.abilityRarity === AbilityRarity.Uncommon) {\n    result = getRandomTextWithWeight(GlobalCardStats.UncommonEffects);\n  } else if (card.abilityRarity === AbilityRarity.Rare) {\n    result = getRandomTextWithWeight(GlobalCardStats.RareEffects);\n  }\n\n  result = result.trim();\n  let loopCount = 0;\n\n  while ([GlobalCardStats.RollCommon, GlobalCardStats.RollUnCommon, GlobalCardStats.RollRare].includes(result)) {\n    loopCount++;\n    if (loopCount >= 2000) {\n      console.log(\"Infinite Loop\");\n      break;\n    }\n    if (result === GlobalCardStats.RollCommon) {\n      console.log(`Rolled Common`);\n      result = getRandomTextWithWeight(GlobalCardStats.CommonEffects);\n    } else if (result === GlobalCardStats.RollUnCommon) {\n      console.log(`Rolled UnCommon`);\n      result = getRandomTextWithWeight(GlobalCardStats.UncommonEffects);\n    } else if (result === GlobalCardStats.RollRare) {\n      console.log(`Rolled Rare`);\n      result = getRandomTextWithWeight(GlobalCardStats.RareEffects);\n    }\n  }\n\n  return result;\n}\n\nfunction getRandomTextWithWeight(textAndWeight) {\n  const texts = [];\n  textAndWeight.forEach(tw => {\n    for (let i = 0; i < tw.Weight; i++) {\n      texts.push(tw.Text);\n    }\n  });\n  return getRandomElement(texts);\n}\n\nfunction getRandomElement(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport default generateRandomCardStats;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}