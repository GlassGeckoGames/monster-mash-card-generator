{"ast":null,"code":"import { Card, globalCardStats, triggersAndEffects, usePointDistributionSystem } from './CardStats';\n\n/**\n * Generates random card stats and assigns a random trigger and effect based on the card's rarity.\n * @returns {Card} - The generated card with random stats, trigger, and effect.\n */\nfunction generateRandomCardStats() {\n  const card = new Card();\n  if (usePointDistributionSystem) {\n    // Distribute points among the stats\n    const distributedStats = distributePoints(globalCardStats.distributionPoints);\n    card.HealthPoints = distributedStats.health;\n    card.Damage = distributedStats.damage;\n    card.Defense = distributedStats.defense;\n    card.Accuracy = distributedStats.accuracy;\n  } else {\n    // Assign random stats to the card within the defined ranges\n    card.Accuracy = getRandomInt(globalCardStats.accuracy[0], globalCardStats.accuracy[1] + 1);\n    card.Defense = getRandomInt(globalCardStats.defense[0], globalCardStats.defense[1] + 1);\n    card.Damage = getRandomInt(globalCardStats.damage[0], globalCardStats.damage[1] + 1);\n    card.HealthPoints = getRandomInt(globalCardStats.health[0], globalCardStats.health[1] + 1);\n  }\n\n  // Generate a random trigger and effect\n  const triggerEffect = generateRandomTriggerEffect();\n  card.Trigger = triggerEffect.trigger;\n  card.Effect = triggerEffect.effect;\n  card.rarity = triggerEffect.rarity;\n  return card;\n}\n\n/**\n * Distributes a given number of points across four stats while respecting min and max values.\n * @param {number} totalPoints - The total points to distribute.\n * @returns {Object} - An object containing the distributed stats.\n */\nfunction distributePoints(totalPoints) {\n  const setStats = {\n    health: globalCardStats.health[0],\n    damage: globalCardStats.damage[0],\n    defense: globalCardStats.defense[0],\n    accuracy: globalCardStats.accuracy[0]\n  };\n  return setStats;\n}\n\n/**\n * Generates a random trigger and effect based on their weights.\n * @returns {Object} - An object containing the selected trigger, effect, and rarity.\n */\nfunction generateRandomTriggerEffect() {\n  // Select a random trigger based on weights\n  const trigger = getRandomElementWithWeight(triggersAndEffects);\n\n  // Select a random effect from the chosen trigger's effects based on weights\n  const effect = getRandomElementWithWeight(trigger.effects);\n  return {\n    trigger: trigger.trigger,\n    effect: effect.name,\n    rarity: trigger.rarity\n  };\n}\n\n/**\n * Selects a random element from an array based on their weights.\n * @param {Array} elements - The array of elements to choose from.\n * @returns {Object} - The selected element.\n */\nfunction getRandomElementWithWeight(elements) {\n  const totalWeight = elements.reduce((acc, element) => acc + parseFloat(element.weight), 0);\n  const randomValue = Math.random() * totalWeight;\n  let cumulativeWeight = 0;\n\n  // Select an element based on the random value\n  for (const element of elements) {\n    cumulativeWeight += parseFloat(element.weight);\n    if (randomValue < cumulativeWeight) {\n      return element;\n    }\n  }\n  return elements[0]; // Fallback to the first element if no element is selected\n}\n\n/**\n * Generates a random integer between the specified min (inclusive) and max (exclusive).\n * @param {number} min - The minimum value.\n * @param {number} max - The maximum value.\n * @returns {number} - The generated random integer.\n */\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nexport default generateRandomCardStats;","map":{"version":3,"names":["Card","globalCardStats","triggersAndEffects","usePointDistributionSystem","generateRandomCardStats","card","distributedStats","distributePoints","distributionPoints","HealthPoints","health","Damage","damage","Defense","defense","Accuracy","accuracy","getRandomInt","triggerEffect","generateRandomTriggerEffect","Trigger","trigger","Effect","effect","rarity","totalPoints","setStats","getRandomElementWithWeight","effects","name","elements","totalWeight","reduce","acc","element","parseFloat","weight","randomValue","Math","random","cumulativeWeight","min","max","floor"],"sources":["/Users/chacenielson/Documents/git-pull/card-generator/src/card-logic/CardGenerator.js"],"sourcesContent":["import { Card, globalCardStats, triggersAndEffects, usePointDistributionSystem } from './CardStats';\n\n/**\n * Generates random card stats and assigns a random trigger and effect based on the card's rarity.\n * @returns {Card} - The generated card with random stats, trigger, and effect.\n */\nfunction generateRandomCardStats() {\n  const card = new Card();\n\n  if (usePointDistributionSystem) {\n    // Distribute points among the stats\n    const distributedStats = distributePoints(globalCardStats.distributionPoints);\n    card.HealthPoints = distributedStats.health;\n    card.Damage = distributedStats.damage;\n    card.Defense = distributedStats.defense;\n    card.Accuracy = distributedStats.accuracy;\n\n  } else {\n    // Assign random stats to the card within the defined ranges\n    card.Accuracy = getRandomInt(globalCardStats.accuracy[0], globalCardStats.accuracy[1] + 1);\n    card.Defense = getRandomInt(globalCardStats.defense[0], globalCardStats.defense[1] + 1);\n    card.Damage = getRandomInt(globalCardStats.damage[0], globalCardStats.damage[1] + 1);\n    card.HealthPoints = getRandomInt(globalCardStats.health[0], globalCardStats.health[1] + 1);\n  }\n\n  // Generate a random trigger and effect\n  const triggerEffect = generateRandomTriggerEffect();\n  card.Trigger = triggerEffect.trigger;\n  card.Effect = triggerEffect.effect;\n  card.rarity = triggerEffect.rarity;\n\n  return card;\n}\n\n/**\n * Distributes a given number of points across four stats while respecting min and max values.\n * @param {number} totalPoints - The total points to distribute.\n * @returns {Object} - An object containing the distributed stats.\n */\nfunction distributePoints(totalPoints) {\n  const setStats = { \n    health: globalCardStats.health[0], \n    damage: globalCardStats.damage[0], \n    defense: globalCardStats.defense[0], \n    accuracy: globalCardStats.accuracy[0] \n  };\n\n\n\n\n  return setStats\n}\n\n/**\n * Generates a random trigger and effect based on their weights.\n * @returns {Object} - An object containing the selected trigger, effect, and rarity.\n */\nfunction generateRandomTriggerEffect() {\n  // Select a random trigger based on weights\n  const trigger = getRandomElementWithWeight(triggersAndEffects);\n  \n  // Select a random effect from the chosen trigger's effects based on weights\n  const effect = getRandomElementWithWeight(trigger.effects);\n\n  return { trigger: trigger.trigger, effect: effect.name, rarity: trigger.rarity };\n}\n\n/**\n * Selects a random element from an array based on their weights.\n * @param {Array} elements - The array of elements to choose from.\n * @returns {Object} - The selected element.\n */\nfunction getRandomElementWithWeight(elements) {\n  const totalWeight = elements.reduce((acc, element) => acc + parseFloat(element.weight), 0);\n  const randomValue = Math.random() * totalWeight;\n  let cumulativeWeight = 0;\n\n  // Select an element based on the random value\n  for (const element of elements) {\n    cumulativeWeight += parseFloat(element.weight);\n    if (randomValue < cumulativeWeight) {\n      return element;\n    }\n  }\n\n  return elements[0]; // Fallback to the first element if no element is selected\n}\n\n/**\n * Generates a random integer between the specified min (inclusive) and max (exclusive).\n * @param {number} min - The minimum value.\n * @param {number} max - The maximum value.\n * @returns {number} - The generated random integer.\n */\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport default generateRandomCardStats;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}